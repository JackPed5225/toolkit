// =============================================================================
// TOOLS / GRADIENTS
// =============================================================================

// Functions
// ==============================================

// gradient-color()
// ------------------------------------

// Function to get gradient colors from `$gradients` instead of using `map-get`.
//
// Options:
// - key: Name of gradient (see toolkit-core/settings/colors)
// - color-stop:
//    - `Ã—%` specific percentage value
//    - `start` the first defined percentage value
//    - `end` the last defined percentage value
@function gradient-color($key, $color-stop: end) {
  // Check the specified gradient exists in `$gradients`.
  @if map-has-key($gradients, $key) {
    // Store the available color stop keys (e.g. 0%, 50%, 100%)
    $color-stop-keys: map-keys(map-get($gradients, $key));
    $color-stop-keys-length: length($color-stop-keys);

    // If the `start` color stop is specified, select the first available key.
    @if $color-stop == start {
      $color-stop: nth($color-stop-keys, 1);
    }

    // If the `end` color stop is specified, select the last available key.
    @if $color-stop == end {
      $color-stop: nth($color-stop-keys, $color-stop-keys-length);
    }

    @if map-has-key(map-get($gradients, $key), $color-stop) {
      @return map-get(map-get($gradients, $key), $color-stop);
    }

    @warn "Unknown #{$color-stop} stop of `#{$key}` in $gradients.";
    @return null;
  }

  @warn "Unknown `#{$key}` in $gradients.";
  @return null;
}

// gradient-color-stops()
// ------------------------------------

// Function to return the gradient color points in a format usable by
// `linear-gradient` and other gradient mixins.

// `gradient-color-stops()` takes two arguments:
//   - $key - The gradient key i.e. `sky-arts`
//   - $modifier - To reverse the gradient direction set this to 'invert'

// Example output:
// `gradient-color-stops(sky-cinema)` = `#903 0%, #cb0033 100%`
// `gradient-color-stops(sky-cinema, true)` = `#cb0033 0%, #903 100%`
//
@function gradient-color-stops($key, $modifier:null) {
  @if map-has-key($gradients, $key) { // Check gradient exists
    $gradient: map-get($gradients, $key);
    $point-list:null; // Create blank list to store color points

    @if $modifier == 'invert' {
      $gradient-inverted: reverse($gradient); // Reverse order of gradient list

      @each $position, $value in $gradient-inverted {
        $inverted-position: 100% - $position; // Invert percentages i.e. 6% => 94%
        $point-list: append($point-list, ($value $inverted-position), comma); // Append ordered values to point list
      }
    }

    @else {
      @each $position, $value in $gradient {
        $point-list: append($point-list, ($value $position), comma);
      }
    }

    @return $point-list;
  }

  @warn "Unknown `#{$key}` in $gradients.";
  @return null;
}

// Mixins
// ===========================================

// @include gradient-background()
// ------------------------------------

// Mixin to generate complete background gradients. Uses values from our map in
// `settings/_colors.scss`.
//
// Example usage:
//
//   html {
//     @include gradient-background(sky-sports, horizontal-invert, 0% 50%);
//   }
//
// OPTIONS
// - key: Name of gradient (see toolkit-core/settings/_colors.scss)
// - direction:
//    - "vertical" Vertical 2 point gradient
//    - "horizontal" Horizontal 3 point gradient
//    - "radial" Radial 2 point gradient

@mixin gradient-background($key, $direction:"vertical", $fallback: false) {
  @if map-has-key($gradients, $key) {
    // Direction Map

    // The direction map stores values for the direction for both prefixed and
    // standard linear-gradient

    $direction-map: (
      vertical: (
        legacy: "top",
        standard: "to bottom",
        type: linear,
        invert: false
      ),
      vertical-invert: (
        legacy: "bottom",
        standard: "to top",
        type: linear,
        invert: true
      ),
      horizontal: (
        legacy: "left",
        standard: "to right",
        type: linear,
        invert: false
      ),
      radial: (
        legacy: "center, ellipse cover",
        standard: "ellipse at center",
        type: radial,
        invert: true
      )
    );

    // Define a list of gradient color stops.
    $gradient-color-stops: gradient-color-stops($key);

    // Testing purposes only
    @warn "#{$gradient-color-stops}";

    // Check if direction exists in direction map:
    @if map-has-key($direction-map, $direction) {
      // Fetch both the legacy and standards version for given direction
      $direction-legacy: map-get(map-get($direction-map, $direction), legacy);
      $direction-standard: map-get(map-get($direction-map, $direction), standard);

      // Fetch linear or radial
      $type: map-get(map-get($direction-map, $direction), type);
      $invert: map-get(map-get($direction-map, $direction), invert);

      // Force horizontal to conform to brand 3 point gradient and vertical or
      // radial to a 2 point gradient.
      @if ($invert == true) {
        $gradient-color-stops: gradient-color-stops($key, invert);
      }

      @if (type-of($fallback) != color) {
        // Select last colour in `$gradient-color-points` and asign as fallback color
        $fallback: gradient-color($key, end);

        @if ($fallback != false) {
          // If `$fallback` has been changed but is invalid, print warning
          @warn "#{$fallback} is not a valid color, falling back to last color in gradient";
        }
      }

      background-color: $fallback; // Fallback for browsers lacking css gradient
      background-image: -webkit-#{$type}-gradient(#{$direction-legacy}, $gradient-color-stops);
      background-image: -moz-#{$type}-gradient(#{$direction-legacy}, $gradient-color-stops);
      background-image: -o-#{$type}-gradient(#{$direction-legacy}, $gradient-color-stops);
      background-image: #{$type}-gradient(#{$direction-standard}, $gradient-color-stops);
    }

    @else {
      @warn "#{$direction}` is not a valid direction, it must be vertical, horizontal or radial.";
    }
  }

  @else {
    @warn "Unknown `#{$key}` in $gradients.";
  }
}

// .test {
//   @include gradient-background(sky-1, radial);
// }
