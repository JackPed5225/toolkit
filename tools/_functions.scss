// =============================================================================
// TOOLS / FUNCTIONS
// =============================================================================

// Private / Framework-Only
// ===========================================

// Function to get values from `$text` instead of using `map-get`.
// Please access ONLY via `font-size` and `line-height` functions.
@function _text-map-get($property, $key, $variant: large) {
  @if ($property == font-size or $property == line-height) {
    // Check the`$key` exists in `$text`.
    @if map-has-key($text, $key) {
      // Check the font-size `$variant` exists for `$key`.
      @if map-has-key(map-get($text, $key), $variant) {
        // Return the specified property values (font-size or line-height) from $text.
        @return map-get(map-get(map-get($text, $key), $variant), $property);
      }

      @warn "Unknown variant of `#{$variant}` for `#{$key}` in $text. Leave empty to use default `large` variant.";
      @return null;
    }

    @warn "Unknown `#{$key}` in $text.";
    @return null;
  }

  @warn "Unknown property of `#{$property}` for `#{$key}` in $text. Valid properties include `font-size` and `line-height`.";
  @return null;
}

// font-size()
// ===========================================

// Function to get font-size from `$text` instead of using `map-get`.
@function font-size($key, $variant:large) {
  @return _text-map-get(font-size, $key, $variant);
}

// line-height()
// ===========================================

// Function to get line-height from `$text` instead of using `map-get`.
@function line-height($key, $variant:large) {
  @return _text-map-get(line-height, $key, $variant);
}

// color()
// ===========================================

// Function to get color from `$colors` instead of using `map-get`.
//
// Usage:
//
//   .foo {
//     color: color(<key>);
//   }
//
@function color($key) {
  @if map-has-key($colors, $key) {
    @return map-get($colors, $key);
  }

  @warn "Unknown `#{$key}` in $colors.";
  @return null;
}

// gradient()
// ===========================================

// Function to get gradient from `$gradients` instead of using `map-get`..
@function gradient($key, $variant:end) {
  @if map-has-key($gradients, $key) {
    @if ($variant != null) {
      @return map-get(map-get($gradients, $key), $variant);
    }

    @return map-get($gradients, $key);
  }

  @warn "Unknown `#{$key}` in $gradients.";
  @return null;
}

// strip-unit()
// ===========================================

// Function to remove the unit from a value i.e. strip-unit(20px) would return 20.
@function strip-unit($num) {
  @if type_of($num) == number {
    @return $num / ($num * 0 + 1);
  }

  @else {
    @warn "Value must be a number i.e. 12, 24px etc.";
  }
}

// convert-to-em()
// ===========================================

// Function to remove the unit from a value to em i.e. strip-unit(30px) would
// return 1.5em assuming $global-font-size was 20px.
@function convert-to-em($value, $base-font-size: $global-font-size) {
  @if unit($value) == "px" {
    @return (strip-unit($value / $base-font-size)) * 1em;
  }

  @if unit($value) == "rem" {
    @return strip-unit($value) * 1em;
  }

  @else {
    @warn "Value must be em or px.";
  }
}

// z-index()
// ===========================================

// Function to get value from `$z-index` instead of using `map-get`.
//
// Usage:
//
//   .foo {
//     z-index: z-index(<key>);
//   }
//
@function z-index($key) {
  @if map-has-key($z-index, $key) {
    @return map-get($z-index, $key);
  }

  @warn "Unknown `#{$key}` in $z-index.";
  @return null;
}
