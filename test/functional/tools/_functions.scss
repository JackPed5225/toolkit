// =============================================================================
// TEST / TOOLS / FUNCTIONS
// =============================================================================

// Import File to Test
// ===========================================
@import "../../../tools/functions";

// color()
// ===========================================

@include test-module("@function color") {
  @include test("should return a hex value for given key.") {
    $actual: color(white);
    $expected: #fff;

    @include assert-equal($actual, $expected);
  }
}

// convert-to-em()
// ===========================================

@include test-module("@function convert-to-em") {
  @include test("returns an em value when pixels are supplied.") {
    $actual: convert-to-em(27px);
    $expected: 1.5em;

    @include assert-equal($actual, $expected);
  }

  @include test("returns a number with no units when a number with no units is supplied.") {
    $actual: convert-to-em(2rem);
    $expected: 2em;

    @include assert-equal($actual, $expected);
  }

  @include test("returns the correct value when different base font size is set.") {
    $actual: convert-to-em(20px, 10px);
    $expected: 2em;

    @include assert-equal($actual, $expected);
  }
}

// font-size()
// ===========================================

@include test-module("@function font-size") {
  @include test("should return a large font-size value for given key.") {
    $actual: font-size(text-body, large);
    $expected: 18px;

    @include assert-equal($actual, $expected);
  }

  @include test("should return a small font-size value for given key.") {
    $actual: font-size(text-body, small);
    $expected: 16px;

    @include assert-equal($actual, $expected);
  }

  @include test("should return a large font-size value if no variant is provided.") {
    $actual: font-size(text-body);
    $expected: 18px;

    @include assert-equal($actual, $expected);
  }
}

// gradient()
// ===========================================

@include test-module("@function gradient") {
  @include test("should return a start hex value for given key.") {
    $actual: gradient("sky-1", start);
    $expected: #0082dc;

    @include assert-equal($actual, $expected);
  }

  @include test("should return an end hex value for given key.") {
    $actual: gradient("sky-1", end);
    $expected: #1ea0f5;

    @include assert-equal($actual, $expected);
  }

  @include test("should return an end hex if no variant is provided.") {
    $actual: gradient("sky-1");
    $expected: #1ea0f5;

    @include assert-equal($actual, $expected);
  }
}

// line-height()
// ===========================================

@include test-module("@function line-height") {
  @include test("should return a large line-height value for given key.") {
    $actual: line-height(text-body, large);
    $expected: 1.44;

    @include assert-equal($actual, $expected);
  }

  @include test("should return a small line-height value for given key.") {
    $actual: line-height(text-body, small);
    $expected: 1.5;

    @include assert-equal($actual, $expected);
  }

  @include test("should return a large line-height value if no variant is provided.") {
    $actual: line-height(text-body);
    $expected: 1.44;

    @include assert-equal($actual, $expected);
  }
}

// strip-unit()
// ===========================================

@include test-module("@function strip-unit") {
  @include test("returns a number with no units when a number with units is supplied.") {
    $actual: strip-unit(20vw);
    $expected: 20;

    @include assert-equal($actual, $expected);
  }

  @include test("returns a number with no units when a number with no units is supplied.") {
    $actual: strip-unit(400);
    $expected: 400;

    @include assert-equal($actual, $expected);
  }
}

// z-index()
// ===========================================

@include test-module("@function z-index") {
  @include test("should return a value for given key.") {
    $actual: z-index(1);
    $expected: 10;

    @include assert-equal($actual, $expected);
  }
}
